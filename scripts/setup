#!/usr/bin/env perl
package main;

use 5.010;
use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
import util;

our $VERSION    = 0.1.8;

my %config      = (
    SASKey => "",
    libEndpoint => ""
);

{   # Parse options.
    Getopt::Long::Configure qw(gnu_getopt);
    my $optVerbose;
    my $optQuiet;
    my $optDryrun;
    my %optConfig;

    GetOptions(
        'verbose|v'     =>  \$optVerbose,
        'quiet|q'       =>  \$optQuiet,
        'dryrun|n'      =>  \$optDryrun,
        'config|c=s'    =>  \%optConfig,
    ) || exit(1);
    $util::verbose  = $optVerbose ? 1 : ($optQuiet ? 3 : 2 );
    $util::dryrun   = $optDryrun;

    # parse config
    while (my ($key,$value) = each %optConfig) {
        if(exists $config{$key}){
            $config{$key} = $value;
        }else{
            pod2usage(
                -msg => "Invalid config key '$key' specified. Supported keys are:",
                -sections => "CONFIGKEY",
                -verbose => 99);
        }
    }
}

my $optType     = shift || "default";

my %flow = (
    default   => sub {
        my $accessLogPath = "/var/log/nginx/access.log";
        my $FLUME_TAR_NAME = "apache-flume-1.6.0-bin.tar.gz";
        my $OPT_HOME = "/opt";
        my $FLUME_HOME = "$OPT_HOME/apache-flume-1.6.0-bin";
        my $FLUME_CONF = "$FLUME_HOME/conf";
        my $FLUME_SINK = "$FLUME_HOME/plugins.d/EventHubSink";
        my $FLUME_SINK_LIB = "$FLUME_SINK/lib";
        my $FLUME_SINK_LIBEXT = "$FLUME_SINK/libext";
        my $FLUME_SERVICE = "/lib/systemd/system/flume.service";
        my $s1 = [];

        regSteps($s1, "Install nginx.", sub {
            installPackageSuite("nginx");
        });
        regSteps($s1, "Install jre.", sub{
            installPackageSuite("jre");
        });
        regSteps($s1, "Install flume.", sub{
            runCmd("rm -f $FLUME_TAR_NAME")
            || runCmd("wget $config{'libEndpoint'}/$FLUME_TAR_NAME")
            || runCmd("tar -xf $FLUME_TAR_NAME -C $OPT_HOME")
            || runCmd("rm -f $FLUME_TAR_NAME");
        });
        regSteps($s1, "Create flume plugin dir.", sub{
            runCmd("rm -rf $FLUME_SINK/*")
            || runCmd("mkdir -p $FLUME_SINK_LIB")
            || runCmd("mkdir -p $FLUME_SINK_LIBEXT");
        });
        regSteps($s1, "Download libs.", sub{
            runCmd("wget $config{'libEndpoint'}/EventHubSink.jar -P $FLUME_SINK_LIB")
            || runCmd("wget $config{'libEndpoint'}/azure-eventhubs-0.7.2.jar -P $FLUME_SINK_LIBEXT")
            || runCmd("wget $config{'libEndpoint'}/bcpkix-jdk15on-1.47.jar -P $FLUME_SINK_LIBEXT")
            || runCmd("wget $config{'libEndpoint'}/bcprov-jdk15on-1.47.jar -P $FLUME_SINK_LIBEXT")
            || runCmd("wget $config{'libEndpoint'}/proton-j-0.13.0.jar -P $FLUME_SINK_LIBEXT");
        });
        regSteps($s1, "Write config file.", sub{
            my $SASKey = $config{'SASKey'};
            $SASKey =~ /Endpoint=sb:\/\/(.*).servicebus.*\/;SharedAccessKeyName=(.*);SharedAccessKey=.*;EntityPath=(.*)/;
            my $namespaceName = $1;
            my $SASKeyName = $2;
            my $eventHubName = $3;
            my $content = << "EOM";
agent1.channels.ch1.type = memory
agent1.sources.source1.channels = ch1
agent1.sources.source1.type = exec
agent1.sources.source1.command = tail -F -n 0 $accessLogPath
agent1.sinks.sink1.channel = ch1
agent1.sinks.sink1.type = EventHubSink
agent1.sinks.sink1.messageType = access
agent1.sinks.sink1.namespaceName = $namespaceName
agent1.sinks.sink1.eventHubName = $eventHubName
agent1.sinks.sink1.sasKeyName = $SASKeyName
agent1.sinks.sink1.sasKey = $SASKey
agent1.channels = ch1
agent1.sources = source1
agent1.sinks = sink1
EOM
            installFile("$FLUME_CONF/flume.conf", $content);
        });
        regSteps($s1, "Register flume service.", sub{
            my $content = << "EOM";
[Unit]
Description=Flume NG
After=nginx.service
Requires=nginx.service

[Service]
Environment=JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
ExecStart=$FLUME_HOME/bin/flume-ng agent --conf $FLUME_HOME/conf/ -f $FLUME_HOME/conf/flume.conf -Dflume.root.logger=DEBUG,console -n agent1

[Install]
WantedBy=multi-user.target"
EOM
            installFile($FLUME_SERVICE, $content);
        });
        regSteps($s1, "Start flume service.", sub{
            runCmd("systemctl enable $FLUME_SERVICE")
            || runCmd("systemctl start flume.service");
        });

        return $s1;
    }
);

my $getSteps = $flow{$optType};
pod2usage(1) unless $getSteps;
runSteps(&$getSteps);

BEGIN{
package util;
#version 0.2
use 5.010;
use strict;
use warnings;
use Exporter qw(import);

our @EXPORT        = qw(installFile installPackageSuite runCmd runSteps regSteps enableService
    LOGDEBUG LOGINFO LOGWARN LOGERR info);
our %EXPORT_TAGS    = (logging => [qw(LOGDEBUG LOGINFO LOGWARN LOGERR info)]);

my $rpmRepo = "http://mirror.azure.cn/zabbix/zabbix/2.2/rhel/7/x86_64/zabbix-release-2.2-1.el7.noarch.rpm";

use constant {
    LOGDEBUG  => 1,
    LOGINFO   => 2,
    LOGWARN   => 3,
    LOGERR    => 4,
};

our $verbose        = LOGINFO;
our $dryrun         = 1;
our $defaultRetry   = 2;
our $defaultSleep   = 5;

sub installFile
{
    my $path        = shift;
    my $content     = shift;
    my $FL;

    return 0 if $dryrun;

    open($FL, '>', $path);
    print $FL $content;
    close $FL;
    return 0;
}

sub setLogLevel
{
    $verbose = shift;
}

sub info
{
    my $msg     = shift;
    my $level   = shift || LOGINFO;

    return if ($verbose > $level);
    say "[MONICAKE] $msg";
}

sub runCmd
{
    my $cmd = shift;
    if ($verbose >= LOGINFO) { $cmd .= " >/dev/null"; }

    info "Run command:\n$cmd", LOGDEBUG;
    return 0 if $dryrun;

    my $ret = system($cmd);
    if ($ret){
        info "Return code is $ret", LOGDEBUG;
    }

    return $ret;
}


my %suites = (
    "nginx"             => ['nginx'],
    "jre"               => ['openjdk-8-jre'],
);

sub installPackageSuite
{
    my $packageSuite    = shift;
    my $packageManager  = getPackageManager();
    return 1 unless $packageManager;

    my $packageInstall  = $$packageManager{install};

    unless(exists $suites{$packageSuite}){
        info("Package suite $packageSuite not supported.");
        exit(4);
    }

    my $packagesRef = $suites{$packageSuite};
    my $packageLine = join(" ", @$packagesRef);
    my $cmd = "$packageInstall $packageLine";
    info "Begin install packages:$packageLine", LOGDEBUG;
    my $ret = runCmd($cmd);
    if (!$ret){
        info("Install succeed.", LOGDEBUG);
    }else{
        info("Install failed. Try update.", LOGDEBUG);
        my $packageUpdate = $$packageManager{refresh};
        runCmd($packageUpdate);
        $ret = runCmd($cmd);
        if (!$ret){
            info("Install succeed.", LOGDEBUG);
        }else{
            info("Install failed.", LOGDEBUG);
        }
    }

    return $ret;
}

sub getPackageManager()
{
    my %pm  = (
        aptitude    => {
            install => "DEBIAN_FRONTEND=noninteractive apt-get -y --no-install-recommends install",
            refresh => "apt-get update"
        },
        yum         => {
            install => "yum -y install",
            refresh => "rpm -q zabbix-release || rpm -ivh $rpmRepo"
        }
    );

    return $pm{aptitude}    unless runCmd('which apt-get 2> /dev/null');
    return $pm{yum}         unless runCmd('which yum 2> /dev/null');

    info("Package manager not supported.", LOGERR);
    exit(3);
}

sub regSteps
{
    my $steps       = shift;
    my $name        = shift;
    my $sub         = shift;
    push @$steps, {
        name    => $name,
        run     => $sub,
    };
}

sub runSteps
{
    my $steps   = shift;
    my $len     = @$steps;
    my $index   = 0;
    foreach my $step (@$steps){
        ++$index;
        info "($index/$len) $$step{name}";
        my $run = $$step{run};
        my $ret = &$run;
        my $retry = $defaultRetry;
        while ($ret && $retry){
            info "failed with code: $ret, $retry retries remaining. Sleep for $defaultSleep seconds...";
            sleep($defaultSleep);
            --$retry;
            $ret = &$run;
        }

        if ($ret){
            info "failed with code: $ret";
            exit(2);
        }
    }
}

sub enableService
{
    my $serviceName     = shift;
    my $serviceManager  = getServiceManager();
    return 1 unless $serviceManager;
    my $cmd = sprintf $$serviceManager{enable}, $serviceName;
    my $ret = runCmd($cmd);

    return $ret;
}

sub getServiceManager
{
     my %pm  = (
        systemctl    => {
            enable => "systemctl enable %s",
        },
        upstart      => {
            enable => "echo %s",
        }
    );

    return $pm{systemctl}       unless runCmd('which systemctl 2> /dev/null');
    return $pm{upstart}         unless runCmd('which status 2> /dev/null');

    info("Service manager not supported.", LOGERR);
    exit(3);
}

1;
}

__END__
=head1 NAME

setup - setup stuff

=head1 SYNOPSIS

setup [-nqv] <server|agent> [-c configKey=configValue]

=head1 DESCRIPTION

B<This program> will help setup monitoring agent/server.

For agent setup, the server ip address should be given.

For server setup, the backend database information could be specified.

=cut
